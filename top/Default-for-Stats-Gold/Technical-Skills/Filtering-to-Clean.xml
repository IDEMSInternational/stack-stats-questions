<?xml version="1.0" encoding="UTF-8"?>
<quiz>
  <question type="stack">
    <name>
      <text>Filtering to Clean</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p>A survey was conducted, involving 100 farmers, wherein they were provided with a questionnaire. The dataset contains information on three key variables resulting from this simulated survey: Age, Variety, and Yield. </p>

<p><a href="[[textdownload name="data.csv"]]{@stack_csv_formatter(data,factor_names)@}[[/textdownload]]">Download Data</a></p>

<br>

<p>To look at this data, we would like to know if younger or older farmers plant different varieties, and get different yields as a consequence. But to do that, we need to make sure that we are getting the right information. Before we can ask our question, we need to look at the variables. So the purpose of these questions are to check we are ready for analysis. We suggest using filtering techniques to clean the dataset to address the following questions.</p>

<br>

<p>1. What is the mean yield of this data set? 
<br>Give your answer to the nearest whole number.</p>
<p>[[input:ans1]] [[validation:ans1]]</p>
<p>[[feedback:prt1]]</p>

<br>

<p>2. What is the mean age of the farmers in this data set? 
<br>Give your answer to 2 decimal place.</p>
<p>[[input:ans2]] [[validation:ans2]]</p>
<p>[[feedback:prt2]]</p>

<br>

<p>3. How many farmers plant the {@quest3_option@} variety?</p>
<p>[[input:ans3]] [[validation:ans3]]</p>
<p>[[feedback:prt3]]</p>

<br>

<p>4. Does the age of the farmer have an effect on the yield?</p>
<p>[[input:ans4]] [[validation:ans4]]</p>
<p>[[feedback:prt4]]</p>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text/>
    </generalfeedback>
    <defaultgrade>1</defaultgrade>
    <penalty>0.1</penalty>
    <hidden>0</hidden>
    <idnumber/>
    <stackversion>
      <text>2025073100</text>
    </stackversion>
    <questionvariables>
      <text><![CDATA[/* ------------- INFORMATION FROM QUESTION AUTHORS */

/* [Factor name, data generation type, data generation info] */
/* Factor name is given as a string */
/* Data generation type is one from the list below.
The generation info is given as a list and contains information both for calculating the 
correct randomized values which the data should take and the possible errors which can 
occur in the data:
For qualitative data, possible errors are given in a list of the actual error value
For quantitative data, possible errors are given in a list of formulae which can be applied 
to the correct values (these formula may of course be simply constant values!)
The desired number of errors should also be given, each possible error in the list is 
then applied with equal probability */

/* 
1. "Option from list", [
    ["Option 1", *probability 1*, errors list],
    ["Option 2", *probability 2*, errors list], 
    ...,
    *number of errors*
]

2. "Integer in range", [
    *lower bound*, *upper bound*, *mean* (need to add this functionality), error formulae list, *number of errors*
]

3. "Sequential index", [
    *start value*, error formulae list, *number of errors*
]

4. "Normal distribution", [
    *mean*, *standard deviation*, error formulae list, *number of errors*
] 
*/

factor_info: [
    ["ID", "Sequential index", 
        [1, [], 0]
    ],
    ["Sex", "Option from list", [
        ["Male", 0.5, ["M", "m", "male", "man"]], 
        ["Female", 0.5, ["F", "f", "female", "woman", "fem", "femelle"]],
        rand_with_step(20,40,1)
    ]],
    ["Age", "Integer in range", 
        [18, 65, 30, [2023-x], 1]
    ],
    ["Variety", "Option from list", [
        ["New", 0.5, ["N", "n", "new", "Nouveau", "nouveau", "nouv."]], 
        ["Traditional", 0.5, ["T", "t", "traditional", "Traditionnelle", "traditionnelle", "trad."]],
        rand_with_step(20,40,1)
    ]],
    ["Yield", "Normal distribution", 
        [40000, 10000, [-x], 1]
    ]
];

/* Dataset dimensions */
number_rows: 100;

/* ------------- END AUTHOR INFO */

/* ------------- DATA SET GENERATION */
column_data: [];

/* Useful variables */
number_factors: length(factor_info);
factor_names: makelist(factor_info[i][1], i, 1, number_factors);
row_list: makelist(i, i, 1, number_rows);

/* Generate data for each factor */
for factor in factor_info do block(
    /* "Option from list" factor type */
    if factor[2] = "Option from list" then block(
        /* Extract important information */
        number_options: length(factor[3])-1,
        option_values: makelist(factor[3][i][1], i, 1, number_options),
        option_probabilities: makelist(factor[3][i][2], i, 1, number_options),
        option_errors: makelist(factor[3][i][3], i, 1, number_options),
        number_errors: last(factor[3]),
        factor_data: [],
        
        /* Generate randomised correct values */
        /* Assign each option in the list a interval in [0,1] of length equal to the associated probability */
        value_prob_ranges: makelist(
            [sum(option_probabilities[j], j, 1, i-1), sum(option_probabilities[j], j, 1, i)], i, 1, number_options
        ),
        /* Randomise choice of option by generating a number in [0,1] and determining in which interval it falls */
        for i: 1 thru number_rows step 1 do block(
            rn: rand(1.0),
            for j: 1 thru number_options step 1 do block(
                if value_prob_ranges[j][1] <= rn and rn < value_prob_ranges[j][2] then factor_data: append(factor_data, [option_values[j]])
            )
        ),
        
        /* Introduce random errors in random positions */
        error_rows: sort(rand_selection(row_list, number_errors)),
        for i: 1 thru number_errors step 1 do block(
            for j: 1 thru number_options do block(
                if factor_data[error_rows[i]] = option_values[j] then (factor_data[error_rows[i]]: rand(option_errors[j]))
            )
        )
    )
    /* "Integer in range" factor type */
    else if factor[2] = "Integer in range" then block(
        /* Extract important information */
        option_errors: factor[3][4],
        number_errors: factor[3][5],
        
        /* Generate randomised correct values */
        factor_data: makelist(rand_with_step(factor[3][1], factor[3][2], 1), i, 1, number_rows),
        
        /* Introduce random errors in random positions */
        error_rows: sort(rand_selection(row_list, number_errors)),
        for i: 1 thru number_errors step 1 do (
            factor_data[error_rows[i]]: ev(rand(option_errors), x=factor_data[error_rows[i]])
        )
    )
    /* "Sequential index" factor type */
    else if factor[2] = "Sequential index" then block(
        /* Extract important information */
        option_errors: factor[3][2],
        number_errors: factor[3][3],
        
        /* Generate randomised correct values */
        factor_data: makelist(factor[3][1] - 1 + i, i, 1, number_rows),
        
        /* Introduce random errors in random positions */
        error_rows: sort(rand_selection(row_list, number_errors)),
        for i: 1 thru number_errors step 1 do (
            factor_data[error_rows[i]]: ev(rand(option_errors), x=factor_data[error_rows[i]])
        )
    )
    /* "Normal distribution" factor type */
    else if factor[2] = "Normal distribution" then block(
        /* Extract important information */
        option_errors: factor[3][3],
        number_errors: factor[3][4],
        
        /* Generate randomised correct values */
        factor_data: makelist(ceiling(random_normal(factor[3][1], factor[3][2])), i, 1, number_rows),
        
        /* Introduce random errors in random positions */
        error_rows: sort(rand_selection(row_list, number_errors)),
        for i: 1 thru number_errors step 1 do (
            factor_data[error_rows[i]]: ev(rand(option_errors), x=factor_data[error_rows[i]])
        )
    ),
    
    /* Append data for each factor to the dataset */
    column_data: append(column_data, [factor_data])
);

/* Rotate the data to be given in rows rather than columns of each factor, also add header row */
data: makelist(makelist(column_data[j][i], j, 1, number_factors), i, 1, number_rows);
data_set: append([factor_names], data);


/* ------------- OTHER QUESTION VARIABLES */

/* question 1 */
yield_list: last(column_data);
mean_yield_with_errors: mean(yield_list);
mean_yield_ignoring_errors: mean(sublist(yield_list, lambda([x], is(x>0))));
mean_yield_correcting_errors: mean(create_list(abs(x), x, yield_list));

/* question 2 */
age_list: column_data[3];
mean_age_with_errors: mean(age_list);
mean_age_ignoring_errors: mean(sublist(age_list, lambda([x], is(x<100))));
mean_age_correcting_errors: mean(create_list(block(if x<100 then return(x) else return(2023-x)), x, age_list));

/* question 3 */
quest3_option: rand({"new", "traditional"});
variety_list: column_data[4];
/* Lists of "correct" variety labels and "alternate"/"erroneous" labels names */
corr_names: if quest3_option="new" then ["New", "new"] else ["Traditional", "traditional"];
alt_names: if quest3_option="new" then delete("new", factor_info[4][3][1][3]) else delete("traditional", factor_info[4][3][2][3]);
/* Number of instances of each variety label in the data set */
corr_names_count: create_list(length(sublist(variety_list, lambda([y], is(y=x)))), x, corr_names);
tot_corr_names_count: corr_names_count[1] + corr_names_count[2];
alt_names_count: create_list(length(sublist(variety_list, lambda([y], is(y=x)))), x, alt_names);

/* Different counts the student could achieve taking different subsets of the correct/alternate labels */
number_corr_names: [
    /* Capitalised correct labels only */
    corr_names_count[1], 
    /* All correct labels (capitalised and lower case) */
    tot_corr_names_count
];
number_some_alt_names: append(
    /* All correct labels + any individual alternate label*/
    makelist(tot_corr_names_count + x, x, alt_names_count),
    /* All correct labels + any one of letter labels, French labels or abbreviated labels */
    [tot_corr_names_count + alt_names_count[1] + alt_names_count[2],
    tot_corr_names_count + alt_names_count[3] + alt_names_count[4],
    tot_corr_names_count + alt_names_count[5]],
    /* All correct labels + any two of the above catagories */
    [tot_corr_names_count + alt_names_count[1] + alt_names_count[2] + alt_names_count[3] + alt_names_count[4],
    tot_corr_names_count + alt_names_count[1] + alt_names_count[2] + alt_names_count[5],
    tot_corr_names_count + alt_names_count[3] + alt_names_count[4] + alt_names_count[5]]
);
number_all_alt_names: tot_corr_names_count + alt_names_count[1] + alt_names_count[2] + alt_names_count[3] + alt_names_count[4] + alt_names_count[5];

/* Plotting the age of the farmers against the yield */
corr_age_list: create_list(block(if x<100 then return(x) else return(2023-x)), x, age_list);
corr_yield_list: create_list(abs(x), x, yield_list);
age_yield_plot: makelist([corr_age_list[i], corr_yield_list[i]], i, 1, number_rows);]]></text>
    </questionvariables>
    <specificfeedback format="html">
      <text/>
    </specificfeedback>
    <questionnote format="moodle_auto_format">
      <text><![CDATA[<p>1. What is the mean yield of this data set?
<br>{@float(mean_yield_correcting_errors)@}</p>
<p>2. What is the mean age of the farmers in this data set?
<br>{@float(mean_age_correcting_errors)@}</p>
<p>3. How many farmers plant the {@quest3_option@} variety?
<br>{@number_all_alt_names@}</p>
<p>4. Does the age of the farmer have an effect on the yield?
<br>"No"</p>]]></text>
    </questionnote>
    <questiondescription format="html">
      <text><![CDATA[<p id="author">Dan Kelly</p>
<p id="concept">https://docs.google.com/document/d/1lzEC4BPdzj3r6J2DFvEc4hBK3BOt6cCz4jrC4c1NWac/edit?usp=drive_link</p>
<p id="reviewer"></p>
<p id="description"></p>]]></text>
    </questiondescription>
    <questionsimplify>1</questionsimplify>
    <assumepositive>0</assumepositive>
    <assumereal>0</assumereal>
    <prtcorrect format="html">
      <text><![CDATA[<span style="font-size: 1.5em; color:green;"><i class="fa fa-check"></i></span> Correct answer, well done.]]></text>
    </prtcorrect>
    <prtpartiallycorrect format="html">
      <text><![CDATA[<span style="font-size: 1.5em; color:orange;"><i class="fa fa-adjust"></i></span> Your answer is partially correct.]]></text>
    </prtpartiallycorrect>
    <prtincorrect format="html">
      <text><![CDATA[<span style="font-size: 1.5em; color:red;"><i class="fa fa-times"></i></span> Incorrect answer.]]></text>
    </prtincorrect>
    <decimals>.</decimals>
    <scientificnotation>*10</scientificnotation>
    <multiplicationsign>none</multiplicationsign>
    <sqrtsign>1</sqrtsign>
    <complexno>i</complexno>
    <inversetrig>cos-1</inversetrig>
    <logicsymbol>lang</logicsymbol>
    <matrixparens>[</matrixparens>
    <isbroken>0</isbroken>
    <variantsselectionseed/>
    <input>
      <name>ans1</name>
      <type>algebraic</type>
      <tans>decimalplaces(mean_yield_correcting_errors,0)</tans>
      <boxsize>15</boxsize>
      <strictsyntax>1</strictsyntax>
      <insertstars>0</insertstars>
      <syntaxhint/>
      <syntaxattribute>0</syntaxattribute>
      <forbidwords/>
      <allowwords/>
      <forbidfloat>0</forbidfloat>
      <requirelowestterms>0</requirelowestterms>
      <checkanswertype>0</checkanswertype>
      <mustverify>1</mustverify>
      <showvalidation>3</showvalidation>
      <options/>
    </input>
    <input>
      <name>ans2</name>
      <type>algebraic</type>
      <tans>decimalplaces(mean_age_correcting_errors,2)</tans>
      <boxsize>15</boxsize>
      <strictsyntax>1</strictsyntax>
      <insertstars>0</insertstars>
      <syntaxhint/>
      <syntaxattribute>0</syntaxattribute>
      <forbidwords/>
      <allowwords/>
      <forbidfloat>0</forbidfloat>
      <requirelowestterms>0</requirelowestterms>
      <checkanswertype>0</checkanswertype>
      <mustverify>1</mustverify>
      <showvalidation>3</showvalidation>
      <options/>
    </input>
    <input>
      <name>ans3</name>
      <type>algebraic</type>
      <tans>number_all_alt_names</tans>
      <boxsize>15</boxsize>
      <strictsyntax>1</strictsyntax>
      <insertstars>0</insertstars>
      <syntaxhint/>
      <syntaxattribute>0</syntaxattribute>
      <forbidwords/>
      <allowwords/>
      <forbidfloat>1</forbidfloat>
      <requirelowestterms>0</requirelowestterms>
      <checkanswertype>0</checkanswertype>
      <mustverify>1</mustverify>
      <showvalidation>3</showvalidation>
      <options/>
    </input>
    <input>
      <name>ans4</name>
      <type>dropdown</type>
      <tans><![CDATA[[["Yes", false], ["No", true]]]]></tans>
      <boxsize>15</boxsize>
      <strictsyntax>1</strictsyntax>
      <insertstars>0</insertstars>
      <syntaxhint/>
      <syntaxattribute>0</syntaxattribute>
      <forbidwords/>
      <allowwords/>
      <forbidfloat>1</forbidfloat>
      <requirelowestterms>0</requirelowestterms>
      <checkanswertype>0</checkanswertype>
      <mustverify>0</mustverify>
      <showvalidation>0</showvalidation>
      <options/>
    </input>
    <prt>
      <name>prt1</name>
      <value>1.0000000</value>
      <autosimplify>1</autosimplify>
      <feedbackstyle>1</feedbackstyle>
      <feedbackvariables>
        <text/>
      </feedbackvariables>
      <node>
        <name>0</name>
        <description>Gives mean yield with the errors</description>
        <answertest>NumAbsolute</answertest>
        <sans>ans1</sans>
        <tans>mean_yield_with_errors</tans>
        <testoptions>1</testoptions>
        <quiet>0</quiet>
        <truescoremode>=</truescoremode>
        <truescore>0</truescore>
        <truepenalty/>
        <truenextnode>-1</truenextnode>
        <trueanswernote>prt1-1-T</trueanswernote>
        <truefeedback format="html">
          <text><![CDATA[<p>Close, but you haven’t properly cleaned the yield variable. Have a look at the options in filtering to try and detect any incorrect values!</p>]]></text>
        </truefeedback>
        <falsescoremode>=</falsescoremode>
        <falsescore>0</falsescore>
        <falsepenalty/>
        <falsenextnode>-1</falsenextnode>
        <falseanswernote>prt1-1-F</falseanswernote>
        <falsefeedback format="html">
          <text/>
        </falsefeedback>
      </node>
      <node>
        <name>1</name>
        <description>Ignores the erroneous values and gives mean yield</description>
        <answertest>NumAbsolute</answertest>
        <sans>ans1</sans>
        <tans>mean_yield_ignoring_errors</tans>
        <testoptions>1</testoptions>
        <quiet>0</quiet>
        <truescoremode>=</truescoremode>
        <truescore>1</truescore>
        <truepenalty/>
        <truenextnode>-1</truenextnode>
        <trueanswernote>prt1-2-T</trueanswernote>
        <truefeedback format="html">
          <text><![CDATA[<p>Great! You have successfully cleaned the yield variable.
<br>If you can justify removing the incorrect value, then this is great - but in reality it is good practice to double check back with the surveyors, or other members who may know before changing a value. This can include the individual interviewed.</p>]]></text>
        </truefeedback>
        <falsescoremode>-</falsescoremode>
        <falsescore>0</falsescore>
        <falsepenalty/>
        <falsenextnode>2</falsenextnode>
        <falseanswernote>prt1-2-F</falseanswernote>
        <falsefeedback format="html">
          <text/>
        </falsefeedback>
      </node>
      <node>
        <name>2</name>
        <description>Corrects the erroneous values and gives mean</description>
        <answertest>NumAbsolute</answertest>
        <sans>ans1</sans>
        <tans>mean_yield_correcting_errors</tans>
        <testoptions>1</testoptions>
        <quiet>0</quiet>
        <truescoremode>=</truescoremode>
        <truescore>1</truescore>
        <truepenalty/>
        <truenextnode>-1</truenextnode>
        <trueanswernote>prt1-3-T</trueanswernote>
        <truefeedback format="html">
          <text><![CDATA[<p>Great! You have successfully cleaned the yield variable.
<br>If you can justify making the negative value as positive, then this is great - but in reality it is good practice to double check back with the surveyors, or other members who may know before changing a value. This can include the individual interviewed.</p>]]></text>
        </truefeedback>
        <falsescoremode>-</falsescoremode>
        <falsescore>0</falsescore>
        <falsepenalty/>
        <falsenextnode>0</falsenextnode>
        <falseanswernote>prt1-3-F</falseanswernote>
        <falsefeedback format="html">
          <text/>
        </falsefeedback>
      </node>
    </prt>
    <prt>
      <name>prt2</name>
      <value>1.0000000</value>
      <autosimplify>1</autosimplify>
      <feedbackstyle>1</feedbackstyle>
      <feedbackvariables>
        <text/>
      </feedbackvariables>
      <node>
        <name>0</name>
        <description>Gives mean age with the errors</description>
        <answertest>NumAbsolute</answertest>
        <sans>ans2</sans>
        <tans>mean_age_with_errors</tans>
        <testoptions>0.01</testoptions>
        <quiet>0</quiet>
        <truescoremode>=</truescoremode>
        <truescore>0</truescore>
        <truepenalty/>
        <truenextnode>-1</truenextnode>
        <trueanswernote>prt2-1-T</trueanswernote>
        <truefeedback format="html">
          <text><![CDATA[<p>Close, but you haven’t properly cleaned the age variable. Have a look at the options in filtering to try and detect any incorrect values!</p>]]></text>
        </truefeedback>
        <falsescoremode>=</falsescoremode>
        <falsescore>0</falsescore>
        <falsepenalty/>
        <falsenextnode>-1</falsenextnode>
        <falseanswernote>prt2-1-F</falseanswernote>
        <falsefeedback format="html">
          <text/>
        </falsefeedback>
      </node>
      <node>
        <name>1</name>
        <description>Ignores the erroneous values and gives mean yield</description>
        <answertest>NumAbsolute</answertest>
        <sans>ans2</sans>
        <tans>mean_age_ignoring_errors</tans>
        <testoptions>0.01</testoptions>
        <quiet>0</quiet>
        <truescoremode>=</truescoremode>
        <truescore>1</truescore>
        <truepenalty/>
        <truenextnode>-1</truenextnode>
        <trueanswernote>prt2-2-T</trueanswernote>
        <truefeedback format="html">
          <text><![CDATA[<p>Great! You have successfully cleaned the age variable.
<br>It looks like you found that one individual gave a very high value, and set it as NA.  If you can justify this, then this is great - but in reality it is good practice to double check back with the surveyors, or other members who may know before changing a value. This can include the individual interviewed; is it possible to follow up in case they gave their birth year not their age?</p>]]></text>
        </truefeedback>
        <falsescoremode>-</falsescoremode>
        <falsescore>0</falsescore>
        <falsepenalty/>
        <falsenextnode>2</falsenextnode>
        <falseanswernote>prt2-2-F</falseanswernote>
        <falsefeedback format="html">
          <text/>
        </falsefeedback>
      </node>
      <node>
        <name>2</name>
        <description>Corrects the erroneous values and gives mean</description>
        <answertest>NumAbsolute</answertest>
        <sans>ans2</sans>
        <tans>mean_age_correcting_errors</tans>
        <testoptions>0.01</testoptions>
        <quiet>0</quiet>
        <truescoremode>=</truescoremode>
        <truescore>1</truescore>
        <truepenalty/>
        <truenextnode>-1</truenextnode>
        <trueanswernote>prt2-3-T</trueanswernote>
        <truefeedback format="html">
          <text><![CDATA[<p>Great! You have successfully cleaned the age variable.
<br>It looks like you assumed one individual gave their year of birth not their age. If you can justify this, then this is great - but in reality it is good practice to double check back with the surveyors, or other members who may know before changing a value. This can include the individual interviewed.</p>]]></text>
        </truefeedback>
        <falsescoremode>-</falsescoremode>
        <falsescore>0</falsescore>
        <falsepenalty/>
        <falsenextnode>0</falsenextnode>
        <falseanswernote>prt2-3-F</falseanswernote>
        <falsefeedback format="html">
          <text/>
        </falsefeedback>
      </node>
    </prt>
    <prt>
      <name>prt3</name>
      <value>1.0000000</value>
      <autosimplify>1</autosimplify>
      <feedbackstyle>1</feedbackstyle>
      <feedbackvariables>
        <text>/* node 1 */
node1_test: if member(ans3, number_corr_names) then 1 else 0;

/* node 2 */
node2_test: if member(ans3, number_some_alt_names) then 1 else 0;</text>
      </feedbackvariables>
      <node>
        <name>0</name>
        <description>Gives number without considering error values</description>
        <answertest>AlgEquiv</answertest>
        <sans>node1_test</sans>
        <tans>1</tans>
        <testoptions/>
        <quiet>0</quiet>
        <truescoremode>=</truescoremode>
        <truescore>0</truescore>
        <truepenalty/>
        <truenextnode>-1</truenextnode>
        <trueanswernote>prt3-1-T</trueanswernote>
        <truefeedback format="html">
          <text><![CDATA[<p>Close, but you haven’t properly cleaned the variety variable. Have a look at the options in filtering to try and detect any incorrect values.</p>]]></text>
        </truefeedback>
        <falsescoremode>=</falsescoremode>
        <falsescore>0</falsescore>
        <falsepenalty/>
        <falsenextnode>-1</falsenextnode>
        <falseanswernote>prt3-1-F</falseanswernote>
        <falsefeedback format="html">
          <text/>
        </falsefeedback>
      </node>
      <node>
        <name>1</name>
        <description>Gives number considering some error values</description>
        <answertest>AlgEquiv</answertest>
        <sans>node2_test</sans>
        <tans>1</tans>
        <testoptions/>
        <quiet>0</quiet>
        <truescoremode>=</truescoremode>
        <truescore>0.5</truescore>
        <truepenalty/>
        <truenextnode>-1</truenextnode>
        <trueanswernote>prt3-2-T</trueanswernote>
        <truefeedback format="html">
          <text><![CDATA[<p>Close, but you haven’t properly cleaned the variety variable. Have a look at the options in filtering to try and detect any incorrect values.</p>]]></text>
        </truefeedback>
        <falsescoremode>-</falsescoremode>
        <falsescore>0</falsescore>
        <falsepenalty/>
        <falsenextnode>0</falsenextnode>
        <falseanswernote>prt3-2-F</falseanswernote>
        <falsefeedback format="html">
          <text/>
        </falsefeedback>
      </node>
      <node>
        <name>2</name>
        <description>Gives number considering all error values</description>
        <answertest>AlgEquiv</answertest>
        <sans>ans3</sans>
        <tans>number_all_alt_names</tans>
        <testoptions/>
        <quiet>0</quiet>
        <truescoremode>=</truescoremode>
        <truescore>1</truescore>
        <truepenalty/>
        <truenextnode>-1</truenextnode>
        <trueanswernote>prt3-3-T</trueanswernote>
        <truefeedback format="html">
          <text><![CDATA[<p>Great! You have successfully cleaned the variety variable and found the correct number of individuals who plant that variety.</p>]]></text>
        </truefeedback>
        <falsescoremode>-</falsescoremode>
        <falsescore>0</falsescore>
        <falsepenalty/>
        <falsenextnode>1</falsenextnode>
        <falseanswernote>prt3-3-F</falseanswernote>
        <falsefeedback format="html">
          <text/>
        </falsefeedback>
      </node>
    </prt>
    <prt>
      <name>prt4</name>
      <value>1.0000000</value>
      <autosimplify>1</autosimplify>
      <feedbackstyle>1</feedbackstyle>
      <feedbackvariables>
        <text/>
      </feedbackvariables>
      <node>
        <name>0</name>
        <description><![CDATA[Correct answer is "No"]]></description>
        <answertest>AlgEquiv</answertest>
        <sans>ans4</sans>
        <tans><![CDATA["No"]]></tans>
        <testoptions/>
        <quiet>0</quiet>
        <truescoremode>=</truescoremode>
        <truescore>1</truescore>
        <truepenalty/>
        <truenextnode>-1</truenextnode>
        <trueanswernote>prt4-1-T</trueanswernote>
        <truefeedback format="html">
          <text><![CDATA[<p>Correct. In this simulated data, there was no effect. Any observed effect is just due to chance.</p>
<p>To see this, you can consider a scatter plot of the data, below we have the age of the farmers on the \(x\)-axis and the yield on the \(y\)-axis.</p>

<br>

<p style="margin-left:30px">{@
plot(
    [discrete, age_yield_plot],
    [x,0,70],
    [xlabel,"Age"],
    [y,0,ceiling(last(sort(corr_yield_list))/10000)*10000],
    [ylabel,"Yield"],
    [style, [points, 2]],
    [point_type, asterisk],
    [plottags,false]
)
@}</p>]]></text>
        </truefeedback>
        <falsescoremode>=</falsescoremode>
        <falsescore>0</falsescore>
        <falsepenalty/>
        <falsenextnode>-1</falsenextnode>
        <falseanswernote>prt4-1-F</falseanswernote>
        <falsefeedback format="html">
          <text><![CDATA[<p>In this simulated data, there was no effect. Any observed effect is just due to chance.</p>
<p>To see this, you can consider a scatter plot of the data, below we have the age of the farmers on the \(x\)-axis and the yield on the \(y\)-axis.</p>

<br>

<p style="margin-left:30px">{@
plot(
    [discrete, age_yield_plot],
    [x,0,70],
    [xlabel,"Age"],
    [y,0,ceiling(last(sort(corr_yield_list))/10000)*10000],
    [ylabel,"Yield"],
    [style, [points, 2]],
    [point_type, asterisk],
    [plottags,false]
)
@}</p>]]></text>
        </falsefeedback>
      </node>
    </prt>
    <deployedseed>1380901209</deployedseed>
    <deployedseed>222344047</deployedseed>
    <deployedseed>286706238</deployedseed>
    <deployedseed>806083264</deployedseed>
    <deployedseed>1752894148</deployedseed>
    <deployedseed>173097596</deployedseed>
    <deployedseed>1237847435</deployedseed>
    <deployedseed>1380091418</deployedseed>
    <deployedseed>120293376</deployedseed>
    <deployedseed>1025989901</deployedseed>
    <deployedseed>1686933893</deployedseed>
    <deployedseed>1763901196</deployedseed>
    <deployedseed>459626713</deployedseed>
    <deployedseed>770256681</deployedseed>
    <deployedseed>1570466202</deployedseed>
    <qtest>
      <testcase>1</testcase>
      <description>Test case assuming the teacher's input gets full marks.</description>
      <testinput>
        <name>ans1</name>
        <value>decimalplaces(mean_yield_correcting_errors,0)</value>
      </testinput>
      <testinput>
        <name>ans2</name>
        <value>decimalplaces(mean_age_correcting_errors,2)</value>
      </testinput>
      <testinput>
        <name>ans3</name>
        <value>number_all_alt_names</value>
      </testinput>
      <testinput>
        <name>ans4</name>
        <value><![CDATA[first(mcq_correct([["Yes", false], ["No", true]]))]]></value>
      </testinput>
      <expected>
        <name>prt1</name>
        <expectedscore>1.0000000</expectedscore>
        <expectedpenalty>0.0000000</expectedpenalty>
        <expectedanswernote>prt1-3-T</expectedanswernote>
      </expected>
      <expected>
        <name>prt2</name>
        <expectedscore>1.0000000</expectedscore>
        <expectedpenalty>0.0000000</expectedpenalty>
        <expectedanswernote>prt2-3-T</expectedanswernote>
      </expected>
      <expected>
        <name>prt3</name>
        <expectedscore>1.0000000</expectedscore>
        <expectedpenalty>0.0000000</expectedpenalty>
        <expectedanswernote>prt3-3-T</expectedanswernote>
      </expected>
      <expected>
        <name>prt4</name>
        <expectedscore>1.0000000</expectedscore>
        <expectedpenalty>0.0000000</expectedpenalty>
        <expectedanswernote>prt4-1-T</expectedanswernote>
      </expected>
    </qtest>
  </question>
</quiz>
